This code was created to showcase the use of QML to make a new, rich UI for 
the open source physics puzzle game "The Butterfly Effect"
    http://the-butterfly-effect.org .

The goals of this "spike":
 * learn how to use QT's QML
   * learn all about the new declarative approach
   * figure out the minimum Qt version needed
   * learn how to integrate C++ code and QML
   * use as little Javascript as possible
   * learn what's missing in QML and needs to be written in C++
     * undo/redo
     * collision detection
     * coordinate conversions
 * prototype a new, simpler UI
 * validate ease-of-use with a few users
 * integrate QQuickView into Qt's standard MainWindow layout
 * scale with size of window
 * coordinate conversions
   * introduce DPI singleton that communicates with view
   * enhance Position class
 * conditionals: only show horizontal arrows when hor resizing is allowed
 * collision detection, and how to visualize issues with that
   * collisions with the borders of the view
   * collisions with other objects (note that moves of objects are not taken into account yet)

I'll leave it up to you to judge if the above succeeded.

Still to be implemented:
 * another approach to adjusting rotation
 * rotation should be taken into account when calculating drag borders
 * undo/redo
   * should also take care of updating the AO after move/resize/rotate
 * polymorphism
   * butterfly, colamintbottle and penguin require animations
   * postit requires different clicking behavior
   * detonatorbox has a handle that needs to be addressed
 * prototype the "toolbox"
 * drag/drop from the "toolbox"
 * tooltips


kaa-ching, a.k.a. Klaas van Gend

